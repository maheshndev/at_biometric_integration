import frappe
from frappe.utils import getdate, nowdate
from datetime import datetime, timedelta
import calendar

def execute(filters=None):
    filters = frappe._dict(filters or {})

    columns = [
        {"label": "Employee", "fieldname": "employee", "fieldtype": "Link", "options": "Employee", "width": 160},
        {"label": "Present", "fieldname": "present", "fieldtype": "Int", "width": 100},
        {"label": "Leave", "fieldname": "leave", "fieldtype": "Int", "width": 100},
        {"label": "No Of Weekends", "fieldname": "no_of_weekends", "fieldtype": "Int", "width": 100},
        {"label": "No Of Holidays", "fieldname": "no_of_holidays", "fieldtype": "Int", "width": 100},
        {"label": "Absent", "fieldname": "absent", "fieldtype": "Int", "width": 100},
        {"label": "Half Day", "fieldname": "half_day", "fieldtype": "Int", "width": 100},
        {"label": "Total Absent", "fieldname": "total_absent", "fieldtype": "Int", "width": 100},
        {"label": "Total Working Days", "fieldname": "total_working_days", "fieldtype": "Int", "width": 100},
        {"label": "Work From Home", "fieldname": "wfh", "fieldtype": "Int", "width": 120},
        {"label": "Working Hours", "fieldname": "working_hours", "fieldtype": "Float", "width": 120},
        {"label": "Total Working Hours", "fieldname": "total_working_hours", "fieldtype": "Float", "width": 120},
        {"label": "Payment Days", "fieldname": "payment_days", "fieldtype": "Int", "width": 100},
    ]

    today = getdate(nowdate())
    month_str = filters.get("month")
    year = int(filters.get("year") or today.year)

    if month_str:
        month_map = {
            "January": 1, "February": 2, "March": 3, "April": 4,
            "May": 5, "June": 6, "July": 7, "August": 8,
            "September": 9, "October": 10, "November": 11, "December": 12
        }
        month = month_map.get(month_str, today.month)

        # Calculate first and last day numbers
        first_day = "01"
        last_day = str(calendar.monthrange(year, month)[1]).zfill(2)

        filters.from_date = first_day
        filters.to_date = last_day

    if not filters.get("from_date") or not filters.get("to_date"):
        frappe.throw("Please select either a Month or both From Date and To Date")

    # Convert from and to dates to full format to use in SQL
    full_from_date = datetime(year, month, int(filters.from_date)).date()
    full_to_date = datetime(year, month, int(filters.to_date)).date()

    conditions = [f"att.attendance_date BETWEEN '{full_from_date}' AND '{full_to_date}'"]

    if filters.get("employee"):
        conditions.append(f"att.employee = '{filters.employee}'")
    if filters.get("company"):
        conditions.append(f"att.company = '{filters.company}'")

    condition_str = "WHERE " + " AND ".join(conditions)

    data = frappe.db.sql(f"""
        SELECT
            att.employee,
            emp.employee_name,
            SUM(CASE WHEN att.status = 'Present' THEN 1 ELSE 0 END) AS present,
            SUM(CASE WHEN att.status = 'Absent' THEN 1 ELSE 0 END) AS absent,
            SUM(CASE WHEN att.status = 'On Leave' THEN 1 ELSE 0 END) AS `leave`,
            SUM(CASE WHEN att.status = 'Half Day' THEN 1 ELSE 0 END) AS half_day,
            SUM(CASE WHEN att.status = 'Work From Home' THEN 1 ELSE 0 END) AS wfh,
            SUM(IFNULL(att.working_hours, 0)) AS working_hours
        FROM `tabAttendance` att
        LEFT JOIN `tabEmployee` emp ON emp.name = att.employee
        {condition_str}
        GROUP BY att.employee
        ORDER BY att.employee
    """, as_dict=True)

    totals = {
        "employee": "Total",
        "employee_name": "",
        "present": 0,
        "absent": 0,
        "leave": 0,
        "half_day": 0,
        "wfh": 0,
        "working_hours": 0.0,
        "no_of_weekends": 0,
        "no_of_holidays": 0,
        "total_absent": 0,
        "total_working_days": 0,
        "total_working_hours": 0.0,
        "payment_days": 0,
        
        
    }

    for row in data:
        totals["present"] += row.get("present", 0)
        totals["absent"] += row.get("absent", 0)
        totals["leave"] += row.get("leave", 0)
        totals["half_day"] += row.get("half_day", 0)
        totals["wfh"] += row.get("wfh", 0)
        totals["working_hours"] += row.get("working_hours", 0.0)
        totals["no_of_weekends"] += row.get("no_of_weekends", 0)
        totals["no_of_holidays"] += row.get("no_of_holidays", 0)
        totals["total_absent"] += row.get("absent", 0) + row.get("leave", 0) + row.get("half_day", 0)
        totals["total_working_days"] += row.get("present", 0) + row.get("absent", 0) + row.get("leave", 0) + row.get("half_day", 0) + row.get("wfh", 0)
        totals["total_working_hours"] += row.get("working_hours", 0.0)
        totals["payment_days"] += row.get("present", 0) + row.get("absent", 0) + row.get("leave", 0) + row.get("half_day", 0) + row.get("wfh", 0)

    data.append(totals)

    return columns, data
##################################################################

import frappe
from frappe.utils import getdate, nowdate
from datetime import datetime, timedelta
import calendar

def execute(filters=None):
    filters = frappe._dict(filters or {})

    columns = [
        {"label": "Employee", "fieldname": "employee", "fieldtype": "Link", "options": "Employee", "width": 160},
        {"label": "Present", "fieldname": "present", "fieldtype": "Float", "width": 100},
        {"label": "Leave", "fieldname": "leave", "fieldtype": "Float", "width": 100},
        {"label": "No Of Weekends", "fieldname": "no_of_weekends", "fieldtype": "Float", "width": 100},
        {"label": "No Of Holidays", "fieldname": "no_of_holidays", "fieldtype": "Float", "width": 100},
        {"label": "Absent", "fieldname": "absent", "fieldtype": "Float", "width": 100},
        {"label": "Half Day", "fieldname": "half_day", "fieldtype": "Float", "width": 100},
        {"label": "Total Absent", "fieldname": "total_absent", "fieldtype": "Float", "width": 100},
        {"label": "Total Working Days", "fieldname": "total_working_days", "fieldtype": "Float", "width": 100},
        {"label": "Work From Home", "fieldname": "wfh", "fieldtype": "Float", "width": 120},
        {"label": "Working Hours", "fieldname": "working_hours", "fieldtype": "Float", "width": 120},
        {"label": "Total Working Hours", "fieldname": "total_working_hours", "fieldtype": "Float", "width": 120},
        {"label": "Payment Days", "fieldname": "payment_days", "fieldtype": "Float", "width": 100},
    ]

    today = getdate(nowdate())
    month_str = filters.get("month")
    year = int(filters.get("year") or today.year)

    if month_str:
        month_map = {
            "January": 1, "February": 2, "March": 3, "April": 4,
            "May": 5, "June": 6, "July": 7, "August": 8,
            "September": 9, "October": 10, "November": 11, "December": 12
        }
        month = month_map.get(month_str, today.month)

        first_day = 1
        last_day = calendar.monthrange(year, month)[1]

        filters.from_date = datetime(year, month, first_day).date()
        filters.to_date = datetime(year, month, last_day).date()

    if not filters.get("from_date") or not filters.get("to_date"):
        frappe.throw("Please select either a Month or both From Date and To Date")

    from_date = getdate(filters.from_date)
    to_date = getdate(filters.to_date)

    attendance_map = frappe._dict()
    attendance = frappe.db.sql("""
        SELECT 
            att.employee, att.attendance_date, att.status, att.working_hours
        FROM `tabAttendance` att
        WHERE att.attendance_date BETWEEN %s AND %s
        {conditions}
    """.format(
        conditions="AND att.employee = %s" if filters.get("employee") else ""
    ), (from_date, to_date, filters.get("employee")) if filters.get("employee") else (from_date, to_date), as_dict=True)

    for att in attendance:
        attendance_map.setdefault(att.employee, {})[att.attendance_date] = att

    employees = frappe.get_all("Employee", fields=["name", "holiday_list"], filters={
        "status": "Active",
        "name": filters.employee if filters.get("employee") else ["!=", ""]
    })

    result = []
    totals = {
        "employee": "Total",
        "present": 0, "leave": 0, "absent": 0,
        "half_day": 0, "wfh": 0, "working_hours": 0,
        "no_of_weekends": 0, "no_of_holidays": 0,
        "total_absent": 0, "total_working_days": 0,
        "total_working_hours": 0, "payment_days": 0
    }

    for emp in employees:
        emp_attendance = attendance_map.get(emp.name, {})
        dates = [from_date + timedelta(days=i) for i in range((to_date - from_date).days + 1)]

        present = leave = absent = half_day = wfh = working_hours = 0
        weekend_dates = set()
        holiday_dates = set()

        for dt in dates:
            weekday = dt.weekday()  # Monday = 0, Sunday = 6
            if weekday in [5, 6]:  # Assuming Saturday and Sunday
                weekend_dates.add(dt)

        if emp.holiday_list:
            holiday_records = frappe.db.get_all("Holiday", fields=["holiday_date"],
                filters={"parent": emp.holiday_list, "holiday_date": ["between", [from_date, to_date]]})
            holiday_dates = set([h.holiday_date for h in holiday_records])
            holiday_dates -= weekend_dates  # exclude weekends from holiday count

        for dt in dates:
            record = emp_attendance.get(dt)
            if record:
                status = record.status
                working_hours += record.working_hours or 0
                if status == "Present":
                    present += 1
                elif status == "On Leave":
                    leave += 1
                elif status == "Half Day":
                    half_day += 1
                elif status == "Work From Home":
                    wfh += 1
                elif status == "Absent":
                    # Check if this date is in weekend or holiday
                    if dt not in weekend_dates and dt not in holiday_dates:
                        absent += 1
            else:
                if dt not in weekend_dates and dt not in holiday_dates:
                    absent += 1  # consider as absent if no attendance and not a weekend/holiday

        no_of_weekends = len(weekend_dates)
        no_of_holidays = len(holiday_dates)
        total_absent = absent + leave + (half_day / 2)
        total_working_days = present + (half_day / 2)
        total_working_hours = working_hours
        payment_days = leave + no_of_holidays + no_of_weekends + absent + present + (half_day / 2) + wfh

        row = {
            "employee": emp.name,
            "present": present,
            "leave": leave,
            "absent": absent,
            "half_day": half_day,
            "wfh": wfh,
            "working_hours": working_hours,
            "no_of_weekends": no_of_weekends,
            "no_of_holidays": no_of_holidays,
            "total_absent": total_absent,
            "total_working_days": total_working_days,
            "total_working_hours": total_working_hours,
            "payment_days": payment_days
        }

        for key in totals:
            if key != "employee":
                totals[key] += row.get(key, 0)

        result.append(row)

    result.append(totals)

    return columns, result
    #######################################################